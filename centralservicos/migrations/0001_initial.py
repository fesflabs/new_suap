# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2019-08-14 14:54


import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_fsm
import djtools.db.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [migrations.swappable_dependency(settings.AUTH_USER_MODEL), ('comum', '0002_auto_20190814_1443'), ('rh', '0001_initial')]

    operations = [
        migrations.CreateModel(
            name='AtendimentoAtribuicao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('atribuido_em', models.DateTimeField(blank=True, null=True, verbose_name='Atribuído em')),
                ('cancelado_em', models.DateTimeField(blank=True, null=True, verbose_name='Cancelado em')),
                ('justificativa_cancelamento', models.TextField(blank=True, null=True, verbose_name='Justificativa')),
                (
                    'tipo_justificativa',
                    djtools.db.models.CharFieldPlus(
                        choices=[('CHAMADO_ESCALADO', 'Chamado Escalado'), ('CHAMADO_RETORNADO', 'Chamado Retornado'), ('NOVA_ATRIBUICAO', 'Chamado com Nova Atribuição')],
                        max_length=25,
                        null=True,
                        verbose_name='Tipo',
                    ),
                ),
                (
                    'atribuido_para',
                    djtools.db.models.ForeignKeyPlus(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='atribuido_para_set',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Atribuído para',
                    ),
                ),
                (
                    'atribuido_por',
                    djtools.db.models.ForeignKeyPlus(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='atribuido_por_set',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Atribuído por',
                    ),
                ),
                (
                    'cancelado_por',
                    djtools.db.models.ForeignKeyPlus(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='cancelado_por_set',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Cancelado por',
                    ),
                ),
            ],
            options={'verbose_name': 'Atribuição', 'verbose_name_plural': 'Atribuições', 'ordering': ['-atribuido_em']},
        ),
        migrations.CreateModel(
            name='Autorizacao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('texto', models.TextField(verbose_name='Texto')),
                ('enviado_em', models.DateTimeField(auto_now_add=True, verbose_name='Enviado em')),
                ('autorizado_em', models.DateTimeField(blank=True, null=True, verbose_name='Autorizado em')),
                (
                    'autorizado_por',
                    djtools.db.models.ForeignKeyPlus(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='autorizado_por_set',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Autorizado por',
                    ),
                ),
            ],
            options={'verbose_name': 'Autorização', 'verbose_name_plural': 'Autorizações', 'ordering': ['enviado_em']},
        ),
        migrations.CreateModel(
            name='AvaliaBaseConhecimento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nota', models.PositiveSmallIntegerField(choices=[[1, '1'], [2, '2'], [3, '3'], [4, '4'], [5, '5']], verbose_name='Nota da Avaliação')),
                ('data', models.DateTimeField(auto_now=True, verbose_name='Data da Avaliação')),
                (
                    'avaliado_por',
                    djtools.db.models.ForeignKeyPlus(
                        on_delete=django.db.models.deletion.CASCADE, related_name='avaliado_por_set', to=settings.AUTH_USER_MODEL, verbose_name='Avaliado Por'
                    ),
                ),
            ],
            options={'verbose_name': 'Avaliação da Base de Conhecimento', 'verbose_name_plural': 'Avaliações das Bases de Conhecimento', 'ordering': ['base_conhecimento']},
        ),
        migrations.CreateModel(
            name='BaseConhecimento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', djtools.db.models.CharFieldPlus(max_length=120, verbose_name='Título')),
                ('resumo', models.TextField(verbose_name='Resumo')),
                ('solucao', models.TextField(blank=True, null=True, verbose_name='Solução')),
                (
                    'tags',
                    djtools.db.models.CharFieldPlus(
                        blank=True,
                        help_text='Separe cada tag com uma vírgula e espaço. Ex.: Ensino, Tecnologia da Informação, Extensão, Internet',
                        max_length=80,
                        null=True,
                        verbose_name='Tags',
                    ),
                ),
                ('atualizado_em', models.DateTimeField(auto_now_add=True)),
                (
                    'necessita_correcao',
                    models.NullBooleanField(
                        choices=[(False, 'Não'), (True, 'Sim')],
                        default=False,
                        help_text='Marque esta opção caso esta base de conhecimento necessite de alguma correção.',
                        verbose_name='Necessita correção?',
                    ),
                ),
                (
                    'supervisao_pendente',
                    models.NullBooleanField(
                        choices=[(False, 'Não'), (True, 'Sim')],
                        default=False,
                        help_text='Marque esta opção caso esta base de conhecimento necessite de aprovação por algum supervisor.',
                        verbose_name='Supervisão pendente?',
                    ),
                ),
                (
                    'visibilidade',
                    djtools.db.models.CharFieldPlus(
                        choices=[('publica', 'Pública'), ('privada', 'Privada'), ('sigilosa', 'Sigilosa')],
                        default='privada',
                        help_text='<strong>Sigilosa:</strong> restringe os artigos apenas a determinados Grupos de Atendimento;<br /><strong>Privada:</strong> artigos visíveis a todos os atendentes da Central de Serviços;<br /> <strong>Pública:</strong> artigos visíveis a todos os atendentes da Central de Serviços e na área de Perguntas Frequentes.',
                        max_length=10,
                        null=True,
                    ),
                ),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo?')),
                ('area', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='comum.AreaAtuacao', verbose_name='Área do Serviço')),
                (
                    'atualizado_por',
                    djtools.db.models.ForeignKeyPlus(
                        null=True, on_delete=django.db.models.deletion.CASCADE, related_name='atualizado_por_set', to=settings.AUTH_USER_MODEL, verbose_name='Atualizado Por'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Base de Conhecimento',
                'verbose_name_plural': 'Bases de Conhecimento',
                'ordering': ['titulo'],
                'permissions': (
                    ('add_active_baseconhecimento', 'Pode adicionar uma base de conhecimento sem necessitar supervisão'),
                    ('add_public_baseconhecimento', 'Pode adicionar uma base de conhecimento pública'),
                    ('review_baseconhecimento', 'Pode revisar bases de conhecimento'),
                    ('pode_unificar_baseconhecimento', 'Pode unificar bases de conhecimento'),
                ),
            },
        ),
        migrations.CreateModel(
            name='BaseConhecimentoAnexo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'anexo',
                    djtools.db.models.FileFieldPlus(
                        upload_to='upload/baseconhecimento/anexos/',
                        validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['xlsx', 'xls', 'csv', 'docx', 'doc', 'pdf', 'jpg', 'jpeg', 'png'])],
                    ),
                ),
                (
                    'base_conhecimento',
                    djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='centralservicos.BaseConhecimento', verbose_name='Base de Conhecimento'),
                ),
            ],
            options={'verbose_name': 'Anexo', 'verbose_name_plural': 'Anexos', 'ordering': ['anexo']},
        ),
        migrations.CreateModel(
            name='CategoriaServico',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', djtools.db.models.CharFieldPlus(help_text='Informe um nome para a categoria de serviço', max_length=80, unique=True, verbose_name='Nome')),
                ('area', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='comum.AreaAtuacao', verbose_name='Área do Serviço')),
            ],
            options={'verbose_name': 'Categoria de Serviço', 'verbose_name_plural': 'Categorias de Serviço', 'ordering': ['nome']},
        ),
        migrations.CreateModel(
            name='CentroAtendimento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', djtools.db.models.CharFieldPlus(help_text='Informe um nome para o Centro de Atendimento', max_length=80, verbose_name='Nome')),
                ('eh_local', models.BooleanField(default=False, verbose_name='Centro de Atendimento Local?')),
                ('area', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='comum.AreaAtuacao', verbose_name='Área do Serviço')),
            ],
            options={'verbose_name': 'Centro de Atendimento', 'verbose_name_plural': 'Centros de Atendimento', 'ordering': ['nome']},
        ),
        migrations.CreateModel(
            name='Chamado',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'status',
                    django_fsm.FSMIntegerField(
                        choices=[(1, 'Aberto'), (2, 'Em atendimento'), (3, 'Resolvido'), (4, 'Fechado'), (5, 'Reaberto'), (6, 'Suspenso'), (7, 'Cancelado')],
                        default=1,
                        protected=True,
                    ),
                ),
                ('descricao', models.TextField(help_text='Descreva a sua solicitação', verbose_name='Descrição')),
                ('aberto_em', models.DateTimeField(auto_now_add=True)),
                (
                    'telefone_adicional',
                    djtools.db.models.BrTelefoneField(
                        blank=True,
                        help_text='Para agilizar o atendimento, informe um número adicional para contato.',
                        max_length=15,
                        verbose_name='Telefone Adicional para Contato',
                    ),
                ),
                (
                    'meio_abertura',
                    djtools.db.models.CharFieldPlus(
                        choices=[('web', 'Interface Web'), ('telefone', 'Telefone'), ('email', 'Email'), ('pessoalmente', 'Pessoalmente')],
                        max_length=20,
                        verbose_name='Meio de Abertura',
                    ),
                ),
                ('numero_patrimonio', djtools.db.models.CharFieldPlus(blank=True, max_length=20, null=True, verbose_name='Número do Patrimônio')),
                ('autorizado', models.NullBooleanField(verbose_name='Autorizado?')),
                ('data_limite_atendimento', models.DateTimeField(verbose_name='Data Limite para atendimento do chamado')),
                ('notificacao_enviada', models.BooleanField(default=False, verbose_name='Notificação Enviada?')),
                (
                    'nota_avaliacao',
                    models.PositiveSmallIntegerField(blank=True, choices=[[1, '1'], [2, '2'], [3, '3'], [4, '4'], [5, '5']], null=True, verbose_name='Nota da Avaliação'),
                ),
                ('comentario_avaliacao', models.TextField(blank=True, verbose_name='Comentário da Avaliação')),
                ('data_avaliacao', models.DateTimeField(null=True, verbose_name='Data da Avaliação')),
                (
                    'reclassificado',
                    models.PositiveSmallIntegerField(help_text='Número de vezes que o chamado foi reclassificado.', null=True, verbose_name='Chamado Reclassificado'),
                ),
                ('fechado_automaticamente', models.NullBooleanField(verbose_name='Fechado Automaticamente?')),
                (
                    'aberto_por',
                    djtools.db.models.ForeignKeyPlus(
                        on_delete=django.db.models.deletion.CASCADE, related_name='aberto_por_set', to=settings.AUTH_USER_MODEL, verbose_name='Aberto Por'
                    ),
                ),
                ('campus', djtools.db.models.ForeignKeyPlus(null=True, on_delete=django.db.models.deletion.CASCADE, to='rh.UnidadeOrganizacional', verbose_name='Campus')),
                (
                    'interessado',
                    djtools.db.models.ForeignKeyPlus(
                        help_text='Caso esteja abrindo o chamado para outra pessoa, informe o nome do interessado.',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='interessado_set',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Interessado',
                    ),
                ),
                (
                    'outros_interessados',
                    models.ManyToManyField(
                        help_text='Vincule neste chamado outros usuários que desejem acompanhar alterações e comentários deste chamado.',
                        related_name='outros_interessados_set',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Outros Interessados',
                    ),
                ),
                (
                    'requisitante',
                    djtools.db.models.ForeignKeyPlus(
                        help_text='Informe o nome de quem está requisitando a abertura do chamado.',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='requisitante_set',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Requisitante',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Chamado',
                'verbose_name_plural': 'Chamados',
                'ordering': ['-aberto_em'],
                'permissions': (
                    ('add_atendimentoatribuicao', 'Pode atribuir um chamado'),
                    ('add_auto_atribuicao', 'Pode assumir um chamado'),
                    ('change_atendimentoatribuicao', 'Pode alterar atribuição de um chamado'),
                    ('reclassify_chamado', 'Pode reclassificar um chamado'),
                    ('solve_chamado', 'Pode resolver um chamado'),
                    ('close_chamado', 'Pode fechar um chamado'),
                    ('reopen_chamado', 'Pode reabrir um chamado'),
                    ('suspend_chamado', 'Pode suspender um chamado'),
                    ('cancel_chamado', 'Pode cancelar um chamado'),
                    ('add_attachement', 'Pode adicionar anexo'),
                    ('add_comment', 'Pode adicionar comentário'),
                    ('add_internal_note', 'Pode adicionar nota interna'),
                    ('add_interested', 'Pode adicionar interessado'),
                    ('remove_interested', 'Pode remover interessado'),
                    ('list_chamados_usuario', 'Pode listar chamados do usuário'),
                    ('list_chamados_suporte', 'Pode listar chamados do suporte'),
                    ('pode_ver_indicadores', 'Pode ver indicadores'),
                ),
            },
        ),
        migrations.CreateModel(
            name='ChamadoAnexo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', djtools.db.models.CharFieldPlus(help_text='Informe uma descrição resumida sobre o arquivo anexado', max_length=80, verbose_name='Descrição')),
                (
                    'anexo',
                    djtools.db.models.FileFieldPlus(
                        max_length=255,
                        upload_to='upload/chamado/anexos/',
                        validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['xlsx', 'xls', 'csv', 'docx', 'doc', 'pdf', 'jpg', 'jpeg', 'png'])],
                    ),
                ),
                ('anexado_em', models.DateTimeField(auto_now_add=True)),
                ('anexado_por', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Anexado Por')),
                ('chamado', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='centralservicos.Chamado', verbose_name='Chamado')),
            ],
            options={'verbose_name': 'Anexo', 'verbose_name_plural': 'Anexos', 'ordering': ['anexo']},
        ),
        migrations.CreateModel(
            name='Comunicacao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('texto', models.TextField(verbose_name='Texto')),
                ('tipo', djtools.db.models.CharFieldPlus(choices=[('comentario', 'Comentário'), ('nota_interna', 'Nota Interna')], max_length=15, verbose_name='Tipo')),
                ('data_hora', models.DateTimeField(default=datetime.datetime.now)),
                ('mensagem_automatica', models.BooleanField(default=False, verbose_name='Mensagem Automática?')),
                (
                    'desconsiderada_em',
                    models.DateTimeField(blank=True, help_text='Informe a partir de quando esta comunicação foi desconsiderada.', null=True, verbose_name='Desconsiderada Em'),
                ),
                (
                    'bases_conhecimento',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Sugestão de bases de conhecimento para este chamado',
                        related_name='comunicacao_basesconhecimento_set',
                        to='centralservicos.BaseConhecimento',
                        verbose_name='Bases de Conhecimento',
                    ),
                ),
                ('chamado', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='centralservicos.Chamado', verbose_name='Chamado')),
                ('remetente', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Remetente')),
                ('usuarios_citados', models.ManyToManyField(related_name='usuarios_citados_set', to=settings.AUTH_USER_MODEL, verbose_name='Usuários Citados')),
            ],
            options={'verbose_name': 'Comunicação', 'verbose_name_plural': 'Comunicações', 'ordering': ['data_hora']},
        ),
        migrations.CreateModel(
            name='GestorAreaServico',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='comum.AreaAtuacao', verbose_name='Área do Serviço')),
                (
                    'gestor',
                    djtools.db.models.ForeignKeyPlus(
                        help_text='Informe o nome do gestor desta área de serviço.',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='gestorareaservico_set',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Gestor',
                    ),
                ),
            ],
            options={'verbose_name': 'Gestor da Área do Serviço', 'verbose_name_plural': 'Gestores das Áreas dos Serviços', 'ordering': ['area']},
        ),
        migrations.CreateModel(
            name='GrupoAtendimento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', djtools.db.models.CharFieldPlus(max_length=120, verbose_name='Nome')),
                ('atendentes', models.ManyToManyField(blank=True, related_name='atendentes_set', to=settings.AUTH_USER_MODEL, verbose_name='Atendentes Vinculados ao Grupo')),
                ('campus', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='rh.UnidadeOrganizacional', verbose_name='Campus')),
                (
                    'centro_atendimento',
                    djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='centralservicos.CentroAtendimento', verbose_name='Centro de Atendimento'),
                ),
                (
                    'grupo_atendimento_superior',
                    djtools.db.models.ForeignKeyPlus(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='centralservicos.GrupoAtendimento', verbose_name='Grupo de Atendimento Superior'
                    ),
                ),
                (
                    'responsaveis',
                    models.ManyToManyField(
                        help_text='O responsável pelo grupo de atendimento deve ser um dos atendentes.',
                        related_name='responsaveis_set',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Responsáveis',
                    ),
                ),
            ],
            options={'verbose_name': 'Grupo de Atendimento', 'verbose_name_plural': 'Grupos de Atendimento', 'ordering': ['nome']},
        ),
        migrations.CreateModel(
            name='GrupoInteressado',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', djtools.db.models.CharFieldPlus(help_text='Informe um título para este grupo de interessados.', max_length=100, verbose_name='Título')),
                (
                    'grupo_atendimento',
                    djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='centralservicos.GrupoAtendimento', verbose_name='Grupo de Atendimento'),
                ),
                ('interessados', models.ManyToManyField(related_name='grupointeressados_set', to=settings.AUTH_USER_MODEL, verbose_name='Interessados')),
            ],
            options={'verbose_name': 'Grupo de Interessados', 'verbose_name_plural': 'Grupos de Interessados', 'ordering': ['titulo']},
        ),
        migrations.CreateModel(
            name='GrupoServico',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', djtools.db.models.CharFieldPlus(help_text='Informe um nome para o grupo de serviço', max_length=80, unique=True, verbose_name='Nome')),
                ('detalhamento', djtools.db.models.CharFieldPlus(help_text='Informe detalhes do grupo de serviço', max_length=600, verbose_name='Descrição')),
                (
                    'icone',
                    djtools.db.models.CharFieldPlus(
                        blank=True,
                        default='list',
                        help_text='Informe um ícone para representar este grupo de Serviços. Fonte: https://fontawesome.com/v4.7.0/icons/',
                        max_length=80,
                        verbose_name='Ícone',
                    ),
                ),
                ('categorias', models.ManyToManyField(to='centralservicos.CategoriaServico')),
            ],
            options={'verbose_name': 'Grupo de Serviço', 'verbose_name_plural': 'Grupos de Serviço', 'ordering': ['nome']},
        ),
        migrations.CreateModel(
            name='HistoricoStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_hora', models.DateTimeField(auto_now_add=True)),
                (
                    'status',
                    models.IntegerField(choices=[(1, 'Aberto'), (2, 'Em atendimento'), (3, 'Resolvido'), (4, 'Fechado'), (5, 'Reaberto'), (6, 'Suspenso'), (7, 'Cancelado')]),
                ),
                (
                    'tempo_atendimento',
                    models.FloatField(help_text='Tempo de Atendimento entre as situações Em Atendimento e Resolvido.', null=True, verbose_name='Tempo de Atendimento'),
                ),
                ('tempo_resposta', models.FloatField(help_text='Tempo de Resposta entre as situações Aberto e Em Atendimento.', null=True, verbose_name='Tempo de Resposta')),
                ('tempo_suspensao', models.FloatField(help_text='Tempo de Suspensão entre as situações Suspenso e Em Atendimento.', null=True, verbose_name='Tempo de Suspensão')),
                (
                    'bases_conhecimento',
                    models.ManyToManyField(
                        blank=True, related_name='basesconhecimento_set', to='centralservicos.BaseConhecimento', verbose_name='Bases de Conhecimento utilizadas'
                    ),
                ),
                ('chamado', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='centralservicos.Chamado', verbose_name='Chamado')),
                ('comunicacao', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='centralservicos.Comunicacao', verbose_name='Comunicação')),
                ('usuario', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={'verbose_name': 'Histórico do Situações', 'verbose_name_plural': 'Históricos do Situações', 'ordering': ['data_hora']},
        ),
        migrations.CreateModel(
            name='Monitoramento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', djtools.db.models.CharFieldPlus(help_text='Informe um título para este monitoramento.', max_length=100, verbose_name='Título')),
                ('token', djtools.db.models.CharFieldPlus(help_text='Token gerado automaticamente pelo sistema.', max_length=32, unique=True, verbose_name='Token')),
                ('cadastrado_em', models.DateTimeField(auto_now_add=True)),
                ('organizar_por_tipo', models.BooleanField(default=True, verbose_name='Organizar por Tipo')),
                (
                    'cadastrado_por',
                    djtools.db.models.ForeignKeyPlus(
                        on_delete=django.db.models.deletion.CASCADE, related_name='cadastrado_por_set', to=settings.AUTH_USER_MODEL, verbose_name='Cadastrado Por'
                    ),
                ),
                ('grupos', models.ManyToManyField(to='centralservicos.GrupoAtendimento', verbose_name='Grupo de Atendimento')),
            ],
            options={'verbose_name': 'Monitoramento', 'verbose_name_plural': 'Monitoramentos', 'ordering': ['titulo']},
        ),
        migrations.CreateModel(
            name='PerguntaAvaliacaoBaseConhecimento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', djtools.db.models.CharFieldPlus(help_text='A resposta à pergunta será uma escala de 1 a 5.', max_length=120, verbose_name='Título')),
                ('ativo', models.BooleanField(default=False, verbose_name='Ativo?')),
                ('area', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='comum.AreaAtuacao', verbose_name='Área do Serviço')),
            ],
            options={
                'verbose_name': 'Pergunta da Avaliação da Base de Conhecimento',
                'verbose_name_plural': 'Perguntas da Avaliação da Base de Conhecimento',
                'ordering': ['area', 'titulo'],
            },
        ),
        migrations.CreateModel(
            name='RespostaPadrao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'status',
                    models.IntegerField(
                        blank=True,
                        choices=[(1, 'Aberto'), (2, 'Em atendimento'), (3, 'Resolvido'), (4, 'Fechado'), (5, 'Reaberto'), (6, 'Suspenso'), (7, 'Cancelado')],
                        default=2,
                        null=True,
                    ),
                ),
                ('texto', models.TextField(verbose_name='Texto Padrão')),
                (
                    'atendente',
                    djtools.db.models.ForeignKeyPlus(
                        on_delete=django.db.models.deletion.CASCADE, related_name='resposta_atendente_set', to=settings.AUTH_USER_MODEL, verbose_name='Atendente'
                    ),
                ),
            ],
            options={'verbose_name': 'Resposta Padrão', 'verbose_name_plural': 'Respostas Padrão', 'ordering': ['texto']},
        ),
        migrations.CreateModel(
            name='Servico',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', djtools.db.models.CharFieldPlus(max_length=120, unique=True, verbose_name='Nome')),
                ('tipo', djtools.db.models.CharFieldPlus(choices=[['REQ', 'Requisição'], ['INC', 'Incidente']], max_length=3, verbose_name='Tipo')),
                ('texto_ajuda', models.TextField(blank=True, null=True, verbose_name='Informações Adicionais')),
                ('texto_modelo', models.TextField(blank=True, null=True, verbose_name='Informações para preenchimento do chamado')),
                ('permite_anexos', models.BooleanField(default=False, verbose_name='Permite anexos?')),
                ('requer_numero_patrimonio', models.BooleanField(default=False, verbose_name='Requer número do patrimônio?')),
                ('permite_abertura_terceiros', models.BooleanField(default=False, verbose_name='Permite abertura de chamado por terceiros?')),
                ('permite_telefone_adicional', models.BooleanField(default=False, verbose_name='Permite interessado informar Telefone Adicional?')),
                ('sla_em_horas', models.PositiveIntegerField(default=1, verbose_name='SLA (em horas)')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo?')),
                (
                    'interno',
                    models.BooleanField(default=False, help_text='Serviços internos estarão disponíveis apenas para Atendentes da Central de Serviço.', verbose_name='Interno?'),
                ),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='comum.AreaAtuacao', verbose_name='Área do Serviço')),
                (
                    'centros_atendimento',
                    models.ManyToManyField(
                        help_text='Informe pelo menos um centro de atendimento responsável pelo atendimento do chamado.',
                        related_name='servicos_centros_atendimento_set',
                        to='centralservicos.CentroAtendimento',
                        verbose_name='Centros de Atendimento',
                    ),
                ),
                (
                    'grupo_servico',
                    djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='centralservicos.GrupoServico', verbose_name='Grupo de Serviço'),
                ),
                (
                    'publico_direcionado',
                    djtools.db.models.ManyToManyFieldPlus(
                        blank=True,
                        help_text='Caso deseje restringir este serviço a apenas alguns tipos de usuário, selecione um ou mais.',
                        related_name='servicos_publico_direcionado_set',
                        to='comum.Publico',
                        verbose_name='Público',
                    ),
                ),
            ],
            options={'verbose_name': 'Serviço', 'verbose_name_plural': 'Serviços', 'ordering': ['grupo_servico', 'tipo', 'nome']},
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', djtools.db.models.CharFieldPlus(help_text='Informe um nome para tag', max_length=60, unique=True, verbose_name='Nome')),
                ('area', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='comum.AreaAtuacao', verbose_name='Área do Serviço')),
            ],
            options={'verbose_name': 'Tag', 'verbose_name_plural': 'Tags', 'ordering': ['nome']},
        ),
        migrations.AddField(
            model_name='chamado',
            name='servico',
            field=djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='centralservicos.Servico', verbose_name='Serviço'),
        ),
        migrations.AddField(
            model_name='chamado',
            name='tags',
            field=djtools.db.models.ManyToManyFieldPlus(
                help_text='Vincule tags neste chamados para facilitar a identificação do mesmo.', related_name='tags_set', to='centralservicos.Tag', verbose_name='Tags'
            ),
        ),
        migrations.AddField(
            model_name='chamado',
            name='uo_interessado',
            field=djtools.db.models.ForeignKeyPlus(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='uo_interessado_set',
                to='rh.UnidadeOrganizacional',
                verbose_name='Unidade Organizacional do Interessado',
            ),
        ),
        migrations.AddField(
            model_name='baseconhecimento',
            name='grupos_atendimento',
            field=models.ManyToManyField(
                blank=True,
                help_text='Não selecione nenhuma opção para exibir esta base de conhecimento em todos os grupos de atendimento.',
                to='centralservicos.GrupoAtendimento',
                verbose_name='Restringir aos Grupos de Atendimento',
            ),
        ),
        migrations.AddField(
            model_name='baseconhecimento',
            name='servicos',
            field=models.ManyToManyField(
                blank=True,
                help_text='Não selecione nenhuma opção para exibir esta base de conhecimento em todos os serviços.',
                related_name='base_conhecimento_servicos_set',
                to='centralservicos.Servico',
                verbose_name='Restringir aos Serviços',
            ),
        ),
        migrations.AddField(
            model_name='avaliabaseconhecimento',
            name='base_conhecimento',
            field=djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='centralservicos.BaseConhecimento', verbose_name='Base de Conhecimento'),
        ),
        migrations.AddField(
            model_name='avaliabaseconhecimento',
            name='pergunta',
            field=djtools.db.models.ForeignKeyPlus(
                null=True, on_delete=django.db.models.deletion.CASCADE, to='centralservicos.PerguntaAvaliacaoBaseConhecimento', verbose_name='Pergunta'
            ),
        ),
        migrations.AddField(
            model_name='autorizacao',
            name='chamado',
            field=djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='centralservicos.Chamado', verbose_name='Chamado'),
        ),
        migrations.AddField(
            model_name='autorizacao',
            name='enviado_para',
            field=djtools.db.models.ForeignKeyPlus(
                on_delete=django.db.models.deletion.CASCADE, related_name='enviado_para_set', to=settings.AUTH_USER_MODEL, verbose_name='Enviado para'
            ),
        ),
        migrations.AddField(
            model_name='autorizacao',
            name='enviado_por',
            field=djtools.db.models.ForeignKeyPlus(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enviado_por_set', to=settings.AUTH_USER_MODEL, verbose_name='Enviado por'
            ),
        ),
        migrations.AddField(
            model_name='atendimentoatribuicao',
            name='chamado',
            field=djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='centralservicos.Chamado', verbose_name='Chamado'),
        ),
        migrations.AddField(
            model_name='atendimentoatribuicao',
            name='grupo_atendimento',
            field=djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='centralservicos.GrupoAtendimento', verbose_name='Grupo de Atendimento'),
        ),
        migrations.AlterUniqueTogether(name='gestorareaservico', unique_together=set([('gestor', 'area')])),
        migrations.AlterUniqueTogether(name='centroatendimento', unique_together=set([('nome', 'area')])),
        migrations.AlterUniqueTogether(name='avaliabaseconhecimento', unique_together=set([('base_conhecimento', 'pergunta', 'avaliado_por')])),
    ]
