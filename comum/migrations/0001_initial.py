# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2019-08-14 11:49

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
import django_extensions.db.fields
from django.conf import settings
from django.db import migrations, models

import djtools.db.models
import djtools.middleware.threadlocals


class Migration(migrations.Migration):

    initial = True

    dependencies = [('auth', '0008_alter_user_username_max_length'), ('contenttypes', '0002_remove_content_type_name')]

    operations = [
        migrations.CreateModel(
            name='UsuarioGrupo',
            fields=[('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'))],
            options={'verbose_name': 'Vínculo de Usuário em Grupo', 'verbose_name_plural': 'Vínculos de Usuário em Grupo', 'db_table': 'auth_user_groups', 'managed': False},
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'
                    ),
                ),
                (
                    'username',
                    models.CharField(
                        error_messages={'unique': 'A user with that username already exists.'},
                        help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name='username',
                    ),
                ),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                (
                    'is_active',
                    models.BooleanField(
                        default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'
                    ),
                ),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('login_attempts', models.IntegerField(default=0, verbose_name='Tentativas de Login')),
                ('eh_servidor', models.BooleanField(default=False)),
                ('eh_aluno', models.BooleanField(default=False)),
                ('eh_prestador', models.BooleanField(default=False)),
                ('eh_docente', models.BooleanField(default=False)),
                ('eh_tecnico_administrativo', models.BooleanField(default=False)),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.Group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.Permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            options={'verbose_name': 'Usuário', 'verbose_name_plural': 'Usuários', 'db_table': 'auth_user'},
            managers=[('objects', django.contrib.auth.models.UserManager())],
        ),
        migrations.CreateModel(
            name='Ano',
            fields=[('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('ano', models.SmallIntegerField(unique=True))],
            options={'verbose_name': 'Ano', 'verbose_name_plural': 'Anos', 'ordering': ['-ano']},
        ),
        migrations.CreateModel(
            name='AreaAtuacao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', djtools.db.models.CharFieldPlus(help_text='Informe um nome para a área de atuação', max_length=120, unique=True, verbose_name='Nome')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, max_length=120, populate_from=('nome',), unique=True, verbose_name='Slug')),
                (
                    'icone',
                    djtools.db.models.CharFieldPlus(
                        blank=True,
                        default='list',
                        help_text='Informe um ícone para representar esta Área de Atuação. Fonte: https://fontawesome.com/v4.7.0/icons/',
                        max_length=80,
                        verbose_name='Ícone',
                    ),
                ),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo?')),
            ],
            options={'verbose_name': 'Área de Atuação', 'verbose_name_plural': 'Áreas de Atuação', 'ordering': ['nome']},
        ),
        migrations.CreateModel(
            name='Arquivo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255)),
                ('data_geracao', models.DateTimeField()),
                ('assinatura', models.CharField(max_length=500)),
                ('criptografado', models.BooleanField(default=True)),
            ],
            options={'abstract': False},
        ),
        migrations.CreateModel(
            name='Beneficio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(max_length=2, null=True, unique=True)),
                ('nome', models.CharField(max_length=30)),
                ('excluido', models.BooleanField(default=False)),
            ],
            options={'verbose_name': 'Benefício', 'verbose_name_plural': 'Benefícios'},
        ),
        migrations.CreateModel(
            name='BeneficioDependente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_inicio', models.DateField()),
                ('data_termino', models.DateField(null=True)),
                ('beneficio', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='comum.Beneficio')),
            ],
            options={'verbose_name': 'Associação Benefício-Dependente', 'verbose_name_plural': 'Associações Benefício-Dependente'},
        ),
        migrations.CreateModel(
            name='Comentario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cadastrado_em', djtools.db.models.DateTimeFieldPlus(auto_now=True)),
                ('texto', models.TextField()),
                ('object_id', models.PositiveIntegerField()),
                (
                    'cadastrado_por',
                    djtools.db.models.CurrentUserField(
                        blank=True,
                        default=djtools.middleware.threadlocals.get_user,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ('content_type', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('resposta', djtools.db.models.ForeignKeyPlus(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='comum.Comentario')),
            ],
            options={'verbose_name': 'Comentário', 'verbose_name_plural': 'Comentários', 'ordering': ('id',)},
        ),
        migrations.CreateModel(
            name='Configuracao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=50, verbose_name='Aplicação')),
                ('chave', models.CharField(max_length=50, verbose_name='Chave')),
                ('valor', models.TextField(null=True, verbose_name='Valor')),
                ('descricao', models.TextField(verbose_name='Descrição')),
            ],
            options={'verbose_name': 'Configuração', 'verbose_name_plural': 'Configurações', 'ordering': ['chave']},
        ),
        migrations.CreateModel(
            name='ConfiguracaoCarteiraFuncional',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('margem_top_bloco_1', models.IntegerField(blank=0, default=0, verbose_name='Margem do Topo Bloco 1')),
                ('margem_top_bloco_2', models.IntegerField(blank=0, default=0, verbose_name='Margem do Topo Bloco 2')),
                ('margem_top_bloco_3', models.IntegerField(blank=0, default=0, verbose_name='Margem do Topo Bloco 3')),
                ('margem_top_bloco_4', models.IntegerField(blank=0, default=0, verbose_name='Margem do Topo Bloco 4')),
            ],
            options={'verbose_name': 'Configuração da Carteira Funcional', 'verbose_name_plural': 'Configurações da Carteira Funcional'},
        ),
        migrations.CreateModel(
            name='ConfiguracaoImpressaoDocumento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'local_impressao',
                    djtools.db.models.CharFieldPlus(
                        blank=True,
                        help_text='Este campo deverá ser preenchido caso o documento necessite do local de expedição. Ex: Natal/RN',
                        max_length=30,
                        null=True,
                        verbose_name='Local de Impressão',
                    ),
                ),
            ],
            options={'verbose_name': 'Configuração de Impressão de Documento', 'verbose_name_plural': 'Configurações de Impressão de Documento'},
        ),
        migrations.CreateModel(
            name='DocumentoControle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('justificativa', djtools.db.models.CharFieldPlus(max_length=2000, null=True, verbose_name='Justificativa')),
                ('ativo', models.BooleanField(default=True)),
                ('data_solicitacao', djtools.db.models.DateTimeFieldPlus(auto_now_add=True, null=True)),
                ('status_solicitacao', models.IntegerField(choices=[[1, 'Atendida'], [2, 'Não Atendida'], [3, 'Rejeitada']], default=2, verbose_name='Situação da Solicitação')),
                ('documento_id', djtools.db.models.CharFieldPlus(blank=True, max_length=255, null=True, verbose_name='Identificação do Documento')),
                ('nome_sugerido', djtools.db.models.CharFieldPlus(blank=True, max_length=20, null=True, verbose_name='Nome Sugerido')),
                ('nome_social', djtools.db.models.CharFieldPlus(blank=True, help_text='Limite de 20 caracteres.', max_length=20, null=True, verbose_name='Nome Social')),
            ],
            options={'verbose_name': 'Solicitação de Documento', 'verbose_name_plural': 'Solicitações de Documentos'},
        ),
        migrations.CreateModel(
            name='DocumentoControleHistorico',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('situacao_historico', models.IntegerField(choices=[[1, 'Atendida'], [2, 'Não Atendida'], [3, 'Rejeitada']], verbose_name='Situação')),
                ('data_historico', djtools.db.models.DateTimeFieldPlus(auto_now_add=True, null=True)),
                ('motivo', djtools.db.models.CharFieldPlus(max_length=2000, verbose_name='Motivo')),
            ],
            options={'verbose_name': 'Histórico da Solicitação de Documento', 'verbose_name_plural': 'Histórico das Solicitações de Documentos'},
        ),
        migrations.CreateModel(
            name='DocumentoControleTipo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', djtools.db.models.CharFieldPlus(help_text='Descrição do documento. Ex: Carteira Funcional', max_length=255, verbose_name='Descrição')),
                ('identificador', djtools.db.models.CharFieldPlus(blank=True, max_length=255, null=True, verbose_name='Identificador')),
            ],
            options={'verbose_name': 'Tipo de Documento para Controle', 'verbose_name_plural': 'Tipos de Documentos para Controle'},
        ),
        migrations.CreateModel(
            name='EstadoCivil',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo_siape', models.CharField(blank=True, max_length=1)),
                ('nome_siape', models.CharField(max_length=25)),
                ('nome', models.CharField(max_length=25)),
                ('ativo', models.BooleanField(default=True)),
            ],
            options={'verbose_name': 'Estado Civil', 'verbose_name_plural': 'Estados Civis'},
        ),
        migrations.CreateModel(
            name='FuncaoCodigo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=7, verbose_name='Cargo/Função')),
            ],
            options={'verbose_name': 'Código de Função', 'verbose_name_plural': 'Códigos de Funções'},
        ),
        migrations.CreateModel(
            name='GerenciamentoGrupo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eh_local', models.BooleanField(default=False, verbose_name='É Local?')),
                ('grupo_gerenciador', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, related_name='grupo_gerenciador_set', to='auth.Group')),
                ('grupos_gerenciados', models.ManyToManyField(related_name='grupos_gerenciados_set', to='auth.Group')),
            ],
            options={'verbose_name': 'Gerenciamento de Grupo', 'verbose_name_plural': 'Gerenciamento de Grupos'},
        ),
        migrations.CreateModel(
            name='GrauParentesco',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(max_length=10, null=True, unique=True)),
                ('nome', models.CharField(max_length=50)),
                ('excluido', models.BooleanField(default=False)),
            ],
            options={'verbose_name': 'Grau de Parentesco', 'verbose_name_plural': 'Graus de Parentesco'},
        ),
        migrations.CreateModel(
            name='IndexLayout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quadro_nome', djtools.db.models.CharFieldPlus(max_length=255, verbose_name='Nome do Quadro')),
                ('quadro_coluna', models.PositiveIntegerField(default=1, verbose_name='Coluna no Leiaute')),
                ('quadro_ordem', models.PositiveIntegerField(verbose_name='Ordem de Apresentação')),
                ('escondido', models.BooleanField(default=False)),
                (
                    'usuario',
                    djtools.db.models.CurrentUserField(
                        blank=True,
                        default=djtools.middleware.threadlocals.get_user,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={'abstract': False},
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=50, verbose_name='Aplicação')),
                ('horario', models.DateTimeField(auto_now_add=True, verbose_name='Horário')),
                ('titulo', djtools.db.models.CharFieldPlus(max_length=255, verbose_name='Título')),
                ('texto', models.TextField(null=True)),
            ],
            options={'abstract': False},
        ),
        migrations.CreateModel(
            name='ManutencaoProgramada',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_cadastro', djtools.db.models.DateTimeFieldPlus(auto_now_add=True)),
                (
                    'tipo',
                    djtools.db.models.CharFieldPlus(
                        choices=[('Funcionalidade', 'Adição de Funcionalidades'), ('Manutenção', 'Manutenção Preventiva'), ('Bug', 'Correção de Bugs')], max_length=255
                    ),
                ),
                ('data_hora_atualizacao', djtools.db.models.DateTimeFieldPlus(verbose_name='Data da atualização')),
                ('previsao_minutos_inatividade', djtools.db.models.PositiveIntegerFieldPlus(verbose_name='Previsão de minutos de inatividade')),
                ('efetivos_minutos_inatividade', djtools.db.models.PositiveIntegerFieldPlus(blank=True, null=True, verbose_name='Efetivos minutos de inatividade')),
                ('data_hora_inicio_notificacao', djtools.db.models.DateTimeFieldPlus(verbose_name='Data de início notificação')),
                ('motivo', models.TextField()),
            ],
            options={'verbose_name': 'Manutenção Programada', 'verbose_name_plural': 'Manutenções Programadas'},
        ),
        migrations.CreateModel(
            name='Municipio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(blank=True, editable=False, max_length=50, verbose_name='Código SIAFI')),
                ('identificacao', djtools.db.models.CharFieldPlus(editable=False, help_text='Este campo é preenchido automaticamente pelo sistema', max_length=255, unique=True)),
                ('nome', djtools.db.models.CharFieldPlus(max_length=255)),
                (
                    'uf',
                    djtools.db.models.BrEstadoBrasileiroField(
                        choices=[
                            ('AC', 'Acre'),
                            ('AL', 'Alagoas'),
                            ('AP', 'Amapá'),
                            ('AM', 'Amazonas'),
                            ('BA', 'Bahia'),
                            ('CE', 'Ceará'),
                            ('DF', 'Distrito Federal'),
                            ('ES', 'Espírito Santo'),
                            ('GO', 'Goiás'),
                            ('MA', 'Maranhão'),
                            ('MT', 'Mato Grosso'),
                            ('MS', 'Mato Grosso do Sul'),
                            ('MG', 'Minas Gerais'),
                            ('PA', 'Pará'),
                            ('PB', 'Paraíba'),
                            ('PR', 'Paraná'),
                            ('PE', 'Pernambuco'),
                            ('PI', 'Piauí'),
                            ('RJ', 'Rio de Janeiro'),
                            ('RN', 'Rio Grande do Norte'),
                            ('RS', 'Rio Grande do Sul'),
                            ('RO', 'Rondônia'),
                            ('RR', 'Roraima'),
                            ('SC', 'Santa Catarina'),
                            ('SP', 'São Paulo'),
                            ('SE', 'Sergipe'),
                            ('TO', 'Tocantins'),
                        ],
                        max_length=2,
                    ),
                ),
            ],
            options={'verbose_name': 'Município', 'verbose_name_plural': 'Municípios', 'ordering': ['identificacao']},
        ),
        migrations.CreateModel(
            name='Notificacao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modulo', models.CharField(max_length=25)),
                ('descricao', models.CharField(max_length=100)),
                ('titulo', models.CharField(max_length=100)),
                ('mensagem', models.TextField(max_length=1024)),
            ],
            options={'abstract': False},
        ),
        migrations.CreateModel(
            name='Ocupacao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(blank=True, max_length=6, null=True, verbose_name='Código que identifica a classificação das ocupações definidas pela CBO-2002')),
                ('descricao', models.CharField(max_length=256, verbose_name='Nome das ocupações definidas pela CBO-2002')),
                ('representante', models.BooleanField(default=False)),
            ],
            options={'verbose_name': 'Ocupação', 'verbose_name_plural': 'Ocupações'},
        ),
        migrations.CreateModel(
            name='Pais',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(max_length=4)),
                ('nome', models.CharField(blank=True, max_length=30, null=True)),
                ('equiparado', models.BooleanField(default=False)),
                ('excluido', models.BooleanField(default=False, verbose_name='Excluído')),
                ('codigo_censup', models.CharField(blank=True, default='', max_length=3, verbose_name='Código CENSUP')),
            ],
            options={'verbose_name': 'País', 'verbose_name_plural': 'Países', 'db_table': 'pais'},
        ),
        migrations.CreateModel(
            name='Preferencia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'tema',
                    djtools.db.models.CharFieldPlus(
                        choices=[('Padrão', 'Padrão'), ('Dunas', 'Dunas'), ('Aurora', 'Aurora'), ('Luna', 'Luna')], max_length=255, verbose_name='Opção de Tema'
                    ),
                ),
                (
                    'contraste',
                    djtools.db.models.CharFieldPlus(choices=[('Normal', 'Normal'), ('Alto Contraste', 'Alto Contraste')], max_length=255, verbose_name='Opção de Contraste'),
                ),
                ('data_cadastro', djtools.db.models.DateTimeFieldPlus(auto_now_add=True)),
                ('usuario', djtools.db.models.OneToOneFieldPlus(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={'verbose_name': 'Preferência do Usuário', 'verbose_name_plural': 'Preferências do Usuário'},
        ),
        migrations.CreateModel(
            name='Publico',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', djtools.db.models.CharFieldPlus(max_length=255, verbose_name='Nome')),
                (
                    'modelo_base',
                    djtools.db.models.CharFieldPlus(
                        choices=[('Funcionario', 'Funcionario'), ('Servidor', 'Servidor'), ('Aluno', 'Aluno'), ('PrestadorServico', 'PrestadorServico')],
                        max_length=255,
                        verbose_name='Modelo base',
                    ),
                ),
                ('manager_base', djtools.db.models.CharFieldPlus(default='objects', max_length=255, verbose_name='Manager base')),
                ('filtro', models.TextField(blank=True, help_text='Informe os parâmetros para filtro dos modelos em formato json.', verbose_name='Filtro')),
                (
                    'filtro_exclusao',
                    models.TextField(blank=True, help_text='Informe os parâmetros para filtro de exclusão dos modelos em formato json.', verbose_name='Filtro de Exclusão'),
                ),
            ],
            options={'verbose_name': 'Público', 'verbose_name_plural': 'Públicos'},
        ),
        migrations.CreateModel(
            name='Raca',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', djtools.db.models.CharFieldPlus(max_length=255, unique=True, verbose_name='Descrição')),
                ('codigo_siape', models.IntegerField(default=0, verbose_name='Código SIAPE')),
                ('inativo_siape', models.BooleanField(default=False, verbose_name='Inativo no SIAPE')),
                ('codigo_censup', models.CharField(blank=True, default='', max_length=10, verbose_name='Código Censup')),
            ],
            options={'verbose_name': 'Raça', 'verbose_name_plural': 'Raças'},
        ),
        migrations.CreateModel(
            name='RegistroEmissaoDocumento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', djtools.db.models.CharFieldPlus(max_length=255)),
                ('data_emissao', djtools.db.models.DateFieldPlus()),
                ('codigo_verificador', models.TextField()),
                ('documento', models.FileField(upload_to='documentos')),
                ('data_validade', djtools.db.models.DateFieldPlus(blank=True, null=True)),
                ('modelo_pk', models.IntegerField(null=True, verbose_name='Identificador')),
            ],
            options={'verbose_name': 'Registro de Emissão de Documento', 'verbose_name_plural': 'Registros de Emissão de Documento'},
        ),
        migrations.CreateModel(
            name='SessionInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.TextField(unique=True, verbose_name='Identificador da Sessão')),
                ('agent', models.TextField(verbose_name='Navegador')),
                ('ip_address', models.TextField(verbose_name='Endereço IP')),
                ('date_time', djtools.db.models.DateTimeFieldPlus(auto_now_add=True, verbose_name='Horário do Login')),
                ('user', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={'verbose_name': 'Informação de Sessão', 'verbose_name_plural': 'Informações de Sessões'},
        ),
        migrations.CreateModel(
            name='TipoCarteiraFuncional',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', djtools.db.models.CharFieldPlus(max_length=255, verbose_name='Nome')),
                ('template', djtools.db.models.CharFieldPlus(choices=[('2015', 'Modelo 2015'), ('2016', 'Modelo 2016')], max_length=255, verbose_name='Template')),
                ('data_cadastro', djtools.db.models.DateTimeFieldPlus(auto_now_add=True)),
                ('modelo', models.FileField(blank=True, null=True, upload_to='comum/carteira_funcional/', verbose_name='Modelo')),
                ('ativo', models.BooleanField(default=False)),
            ],
            options={'verbose_name': 'Tipo de Carteira Funcional', 'verbose_name_plural': 'Tipos de Carteira Funcional'},
        ),
        migrations.CreateModel(
            name='TrocarSenha',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', djtools.db.models.CharFieldPlus(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('token', models.CharField(max_length=128)),
                ('validade', models.DateTimeField()),
            ],
            options={'abstract': False},
        ),
        migrations.CreateModel(
            name='UnidadeFederativa',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(blank=True, max_length=30, null=True)),
                ('sigla', models.CharField(blank=True, max_length=2, null=True)),
            ],
            options={'verbose_name': 'Unidade Federativa', 'verbose_name_plural': 'Unidades Federativas', 'db_table': 'unidade_federativa'},
        ),
        migrations.CreateModel(
            name='Vinculo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_relacionamento', models.PositiveIntegerField(verbose_name='Identificador do Relacionamento')),
                (
                    'tipo_relacionamento',
                    djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='Tipo de Relacionamento'),
                ),
                ('user', djtools.db.models.ForeignKeyPlus(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={'verbose_name': 'Vínculo', 'verbose_name_plural': 'Vínculos'},
        ),
        migrations.AddField(
            model_name='manutencaoprogramada', name='equipe_manutencao', field=djtools.db.models.ManyToManyFieldPlus(to='comum.Vinculo', verbose_name='Equipe de manutenção')
        ),
        migrations.AddField(
            model_name='manutencaoprogramada',
            name='usuario',
            field=djtools.db.models.CurrentUserField(
                blank=True,
                default=djtools.middleware.threadlocals.get_user,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
                verbose_name='Última Alteração por',
            ),
        ),
        migrations.AddField(
            model_name='documentocontrolehistorico',
            name='responsavel_vinculo',
            field=djtools.db.models.ForeignKeyPlus(null=True, on_delete=django.db.models.deletion.CASCADE, to='comum.Vinculo', verbose_name='Responsável'),
        ),
        migrations.AddField(
            model_name='documentocontrolehistorico',
            name='solicitacao',
            field=djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='comum.DocumentoControle', verbose_name='Solicitação'),
        ),
        migrations.AddField(
            model_name='documentocontrole',
            name='documento_tipo',
            field=djtools.db.models.ForeignKeyPlus(null=True, on_delete=django.db.models.deletion.CASCADE, to='comum.DocumentoControleTipo', verbose_name='Tipo do Documento'),
        ),
        migrations.AddField(
            model_name='documentocontrole',
            name='solicitante_vinculo',
            field=djtools.db.models.ForeignKeyPlus(null=True, on_delete=django.db.models.deletion.CASCADE, to='comum.Vinculo', verbose_name='Solicitante'),
        ),
        migrations.AddField(
            model_name='configuracaoimpressaodocumento',
            name='tipos_documento',
            field=djtools.db.models.ManyToManyFieldPlus(to='comum.DocumentoControleTipo', verbose_name='Tipos de Documento'),
        ),
        migrations.AlterUniqueTogether(name='configuracao', unique_together=set([('app', 'chave')])),
        migrations.AddField(
            model_name='arquivo', name='vinculo', field=djtools.db.models.ForeignKeyPlus(null=True, on_delete=django.db.models.deletion.CASCADE, to='comum.Vinculo')
        ),
        migrations.AlterUniqueTogether(name='vinculo', unique_together=set([('tipo_relacionamento', 'id_relacionamento')])),
        migrations.AlterUniqueTogether(name='documentocontrole', unique_together=set([('documento_tipo', 'documento_id')])),
    ]
