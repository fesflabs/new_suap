# Generated by Django 2.2.7 on 2020-02-17 14:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import djtools.db.models
from django.db import connection
from django.db.utils import OperationalError


def get_constraint_name():
    try:
        sql = "SELECT conname FROM pg_catalog.pg_constraint where conname LIKE 'eventos_participante_evento_id_%_uniq' limit 1"
        cur = connection.cursor()
        cur.execute(sql)
        connection._commit()
        result = cur.fetchone()
        constraint_name = result and result[0] or None
        return constraint_name
    except OperationalError:
        return None


class Migration(migrations.Migration):

    dependencies = [
        ('comum', '0008_auto_20200205_1500'),
        ('auth', '0011_update_proxy_permissions'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('eventos', '0002_auto_20191218_1058'),
    ]

    operations = [
        migrations.CreateModel(
            name='TipoParticipacao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', djtools.db.models.CharFieldPlus(max_length=255, verbose_name='Descrição')),
                (
                    'modelo_certificado_padrao',
                    models.FileField(
                        blank=True,
                        help_text='O arquivo de modelo deve ser uma arquivo .docx contendo as marcações #EVENTO#, #NOMEDOPARTICIPANTE#, #TIPODOPARTICIPANTE#, #CPF#, #CAMPUS#, #CIDADE#, #UF#, #DATA#, #CODIGOVERIFICADOR#.',
                        null=True,
                        upload_to='eventos/modelo_certificado/',
                        verbose_name='Modelo de Certificado Padrão',
                    ),
                ),
            ],
            options={'verbose_name': 'Tipo de Participação', 'verbose_name_plural': 'Tipos de Participações'},
        ),
        migrations.AlterModelOptions(name='evento', options={'verbose_name': 'Evento', 'verbose_name_plural': 'Eventos'}),
        migrations.AlterModelOptions(name='participante', options={'verbose_name': 'Participação em Evento', 'verbose_name_plural': 'Participações em Evento'}),
        migrations.AddField(model_name='evento', name='data_fim_inscricoes', field=djtools.db.models.DateFieldPlus(null=True, verbose_name='Fim das Inscrições')),
        migrations.AddField(model_name='evento', name='data_inicio_inscricoes', field=djtools.db.models.DateFieldPlus(null=True, verbose_name='Início das Inscrições')),
        migrations.AddField(
            model_name='evento',
            name='inscricao_publica',
            field=models.BooleanField(
                default=False,
                help_text='Marque essa opção caso deseje que as inscrições sejam realizadas pelos próprios participantes através do link "Realizar Inscrição em Evento" na tela de login do SUAP.',
                verbose_name='Inscrição Online',
            ),
        ),
        migrations.AddField(model_name='evento', name='submetido', field=models.BooleanField(default=True, verbose_name='Submetido?')),
        migrations.AddField(
            model_name='participante',
            name='ch_extensao',
            field=models.IntegerField(
                blank=True, help_text='Carga horária total destinada a atividade curricular de extensão', null=True, verbose_name='Carga Horária de Extensão'
            ),
        ),
        migrations.AddField(model_name='participante', name='cpf', field=djtools.db.models.BrCpfField(max_length=14, null=True, verbose_name='CPF')),
        migrations.AddField(model_name='participante', name='inscricao_validada', field=models.BooleanField(default=True, verbose_name='Inscrição Validada')),
        migrations.AddField(model_name='participante', name='presenca_confirmada', field=models.BooleanField(default=False, verbose_name='Presença Confirmada')),
        migrations.AddField(
            model_name='participante',
            name='vinculo',
            field=djtools.db.models.ForeignKeyPlus(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='comum.Vinculo', verbose_name='Vínculo'),
        ),
        migrations.AlterField(
            model_name='evento',
            name='campus',
            field=djtools.db.models.ForeignKeyPlus(
                on_delete=django.db.models.deletion.CASCADE, related_name='campus_responsavel', to='rh.UnidadeOrganizacional', verbose_name='Campus'
            ),
        ),
        migrations.AlterField(
            model_name='evento',
            name='carga_horaria',
            field=models.CharField(blank=True, help_text='Carga-Horária total do evento', max_length=255, null=True, verbose_name='Carga Horária'),
        ),
        migrations.AlterField(
            model_name='evento',
            name='classificacao',
            field=djtools.db.models.ForeignKeyPlus(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='eventos.ClassificacaoEvento', verbose_name='Tipo'),
        ),
        migrations.AlterField(
            model_name='evento',
            name='coordenador',
            field=djtools.db.models.ForeignKeyPlus(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rh.Servidor', verbose_name='Coordenador'),
        ),
        migrations.AlterField(
            model_name='evento', name='data_emissao_certificado', field=models.DateTimeField(blank=True, null=True, verbose_name='Data de Emissão do Certificado')
        ),
        migrations.AlterField(model_name='evento', name='motivo_indeferimento', field=models.TextField(null=True, verbose_name='Motivo do Indeferimento')),
        migrations.AlterField(model_name='evento', name='natureza', field=models.ManyToManyField(to='eventos.Natureza', verbose_name='Natureza')),
        migrations.AlterField(
            model_name='evento',
            name='recursos',
            field=djtools.db.models.DecimalFieldPlus(
                blank=True,
                decimal_places=2,
                help_text='Valor em R$ do total de recurso público destinado a realização do evento',
                max_digits=12,
                null=True,
                verbose_name='Recursos Envolvidos',
            ),
        ),
        migrations.AlterField(
            model_name='evento',
            name='setor',
            field=djtools.db.models.ForeignKeyPlus(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rh.Setor', verbose_name='Setor'),
        ),
        migrations.AlterField(
            model_name='evento', name='site', field=djtools.db.models.CharFieldPlus(blank=True, help_text='URL da página do evento', max_length=255, null=True, verbose_name='Site')
        ),
        migrations.AlterField(model_name='evento', name='tipo', field=models.ManyToManyField(to='eventos.TipoEvento', verbose_name='Classificação')),
        migrations.AlterField(
            model_name='participante', name='codigo_geracao_certificado', field=djtools.db.models.CharFieldPlus(max_length=16, null=True, verbose_name='Código de Validação')
        ),
        migrations.AlterField(model_name='participante', name='data_cadastro', field=models.DateTimeField(auto_now_add=True, verbose_name='Data do Cadastro')),
        migrations.AlterField(model_name='participante', name='email', field=models.EmailField(max_length=254, verbose_name='E-mail')),
        migrations.AlterField(
            model_name='participante',
            name='evento',
            field=djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, related_name='participantes', to='eventos.Evento', verbose_name='Evento'),
        ),
        migrations.AlterField(model_name='participante', name='nome', field=djtools.db.models.CharFieldPlus(max_length=255, verbose_name='Nome')),
        migrations.CreateModel(
            name='TipoParticipante',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('limite_inscricoes', models.IntegerField(blank=True, null=True, verbose_name='Limite de Inscrições')),
                (
                    'modelo_certificado',
                    models.FileField(
                        blank=True,
                        help_text='O arquivo de modelo deve ser uma arquivo .docx contendo as marcações #EVENTO#, #PARTICIPANTE#, #CPF#, #CAMPUS#, #CIDADE#, #UF#, #DATA#, #CODIGOVERIFICADOR#. Não preencher caso deseje utilizar o modelo padrão.',
                        null=True,
                        upload_to='eventos/modelo_certificado/',
                        verbose_name='Modelo de Certificado',
                    ),
                ),
                ('evento', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, related_name='tipos_participante', to='eventos.Evento')),
                (
                    'tipo_participacao',
                    djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, related_name='tipos_participante', to='eventos.TipoParticipacao'),
                ),
            ],
            options={'verbose_name': 'Tipo de Participante', 'verbose_name_plural': 'Tipos de Participante'},
        ),
        migrations.CreateModel(
            name='HistoricoEvento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateTimeField(auto_now_add=True, verbose_name='Data')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('evento', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='eventos.Evento')),
                ('user', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={'verbose_name': 'Histórico de Evento', 'verbose_name_plural': 'Históricos de Evento'},
        ),
        migrations.CreateModel(
            name='Dimensao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=50, verbose_name='Descrição')),
                ('grupos_avaliadores_locais', djtools.db.models.ManyToManyFieldPlus(blank=True, related_name='s1', to='auth.Group', verbose_name='Grupos Avaliadores Locais')),
                (
                    'grupos_avaliadores_sistemicos',
                    djtools.db.models.ManyToManyFieldPlus(blank=True, related_name='s2', to='auth.Group', verbose_name='Grupos Avaliadores Sistêmicos'),
                ),
            ],
            options={'verbose_name': 'Dimensão', 'verbose_name_plural': 'Dimensões'},
        ),
        migrations.AddField(model_name='evento', name='dimensoes', field=models.ManyToManyField(to='eventos.Dimensao', verbose_name='Dimensões')),
        migrations.AddField(
            model_name='participante',
            name='tipo',
            field=djtools.db.models.ForeignKeyPlus(
                null=True, on_delete=django.db.models.deletion.CASCADE, related_name='participantes', to='eventos.TipoParticipante', verbose_name='Tipo'
            ),
        ),
        migrations.AddField(
            model_name='participante',
            name='publico_alvo',
            field=djtools.db.models.ForeignKeyPlus(null=True, on_delete=django.db.models.deletion.CASCADE, to='eventos.PublicoAlvoEvento', verbose_name='Perfil'),
        ),

        # model, columns,# exclude=meta_constraint_names | meta_index_names,
        # O "if exists" foi acrescentando pois ao tentar criar o banco do zero, a partir do comando "python manage.py migrate"
        # ocorria o erro abaixo:
        # django.db.utils.ProgrammingError: constraint "none" of relation "eventos_participante" does not exist
        migrations.RunSQL(
            'alter table eventos_participante drop constraint if exists {};'.format(get_constraint_name())
        ),
    ]
