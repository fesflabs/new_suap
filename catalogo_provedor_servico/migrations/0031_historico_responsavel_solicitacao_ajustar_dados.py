# Generated by Django 2.2.10 on 2020-07-09 22:38

from django.db import migrations
from django.db.models import F


def ajustar_historico(apps, schema_editor):
    '''
    Antes desse ajuste, o histórico de responsáveis por determinada solicitação só era criado caso o gerente sistêmico
    resolvesse avaliar/executar a solicitação já assumido por outra pessoa. Nesse caso o antigo responsável pelo
    atendimento era salvo na entidade SolicitacaoResponsavelHistorico e na entidade Solicitacao ficava registrado o
    o novo responsável. Caso contrário, a informação de quem atendeu determinada solicitação só ficava na própria entidade
    Solicitacao.

    A partir de agora, três mudanças importantes ocorreram:
    - Pra realizar um atendimento, o usuário TEM QUE ASSUMIR a solicitação, ou seja, gerente sistêmico não poderá mais
    avaliar/executar solicitação sem assumir o chamado, "passando por cima" do responsável registrado atualmente.
    - A cada vez que a solicitação for assumida por alguém, será criada uma entrada em SolicitacaoResponsavelHistorico.
    - Passamos a registrar quem fez a atribuição de determinada solicitação (atribuinte) e algums instrução a ser observada
    pelo novo responsável pelo chamado.

    Diante da nova realidade, a rotina abaixo faz duas coisas:
    - Ajusta o histórico vigente, adicionando como atribuinte o próprio responsável na época pela solicitação, já que
    o usuário podia, e ainda pode, assumir o chamado.
    - Cria o registro de histórico para as solicitações que não possuem nenhum histrórico, conforme explicado no primeiro
    parágrafo desta documentação.

    :param apps:
    :param schema_editor:
    :return: None
    '''

    Solicitacao = apps.get_model('catalogo_provedor_servico', 'Solicitacao')
    SolicitacaoResponsavelHistorico = apps.get_model('catalogo_provedor_servico', 'SolicitacaoResponsavelHistorico')
    instrucao_padrao = 'Assumiu atendimento.'

    # Ajustando o histórico existente. No caso como o próprio responsável "se auto atribuia" o chamado (isso ainda será permitido),
    # então ele será definido também como "atribuinte".
    for srh in SolicitacaoResponsavelHistorico.objects.all():
        # Atribuinte e instrução são novos atributos, criados na migration "0030_historico_responsavel_solicitacao_novos_atributos.py".
        srh.atribuinte = srh.responsavel
        srh.instrucao = instrucao_padrao
        # Em tese o atributo "data_associacao_responsavel" nunca vai estar vazio, apesar do campo permitir null (isso não
        # será mais permitido mais a frente).
        if not srh.data_associacao_responsavel:
            srh.data_associacao_responsavel = srh.solicitacao.data_ultima_atualizacao
        srh.save()

    solicitacoes_sem_historico = Solicitacao.objects.filter(responsavel__isnull=False)

    # Setando os novos atributos "atribuinte" e "instrucao" da entidade Solicitacao.
    solicitacoes_sem_historico.update(atribuinte=F('atribuinte'), instrucao=instrucao_padrao)

    # Criando o registro de histórico para as solicitações que não tem nenhum registro.
    for s in solicitacoes_sem_historico:
        srh = SolicitacaoResponsavelHistorico.objects.filter(solicitacao=s,
                                                             atribuinte=s.atribuinte,
                                                             responsavel=s.responsavel,
                                                             data_associacao_responsavel=s.data_associacao_responsavel)
        if not srh.exists():
            SolicitacaoResponsavelHistorico.objects.create(
                solicitacao=s,
                atribuinte=s.responsavel,
                responsavel=s.responsavel,
                data_associacao_responsavel=s.data_associacao_responsavel,
                instrucao=instrucao_padrao
            )


class Migration(migrations.Migration):

    dependencies = [
        ('catalogo_provedor_servico', '0030_historico_responsavel_solicitacao_novos_atributos'),
    ]

    operations = [
        migrations.RunPython(ajustar_historico),
    ]
