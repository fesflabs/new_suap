version: '3.9'
services:
  web-dev:
    restart: always
    stdin_open: true
    tty: true
    user: "33:33"
    env_file:
      - .env
    image: "${DEV_IMAGE}"
    build:
      context: ..
      dockerfile: .././docker/Dockerfile
      target: suap-dev
    command: >
      bash -c '
        python manage.py migrate
        python manage.py runserver 0.0.0.0:${APP_PORT:-8000}
      '
    profiles:
      - dev
    ports:
      - ${APP_PORT:-8000}:${APP_PORT:-8000}
    ulimits:
      memlock: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - type: bind
        source: ../../
        target: /opt/suap
    healthcheck:
      test: curl --fail -s http://web-dev:8000/accounts/login/
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - suap
    extra_hosts:
      - "host.docker.internal:host-gateway"

  celery-dev:
    restart: always
    stdin_open: true
    tty: true
    user: "33:33"
    env_file:
      - .env
    image: "${DEV_IMAGE}"
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      target: suap-dev
    command: ./bin/celery.sh $CELERY_QUEUE
    profiles:
      - dev
    ulimits:
      memlock: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - type: bind
        source: ../
        target: /opt/suap
    networks:
      - suap
    healthcheck:
      test: celery -A suap inspect ping
      interval: 30s
      timeout: 10s
      retries: 5
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # não utilizado em produção
  redis:
    restart: always
    env_file:
      - .env
    networks:
      - suap
    profiles:
      - redis
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # não utilizado em produção
  db:
    restart: always
    env_file:
      - .env
    networks:
      - suap
    image: postgres:13
    profiles:
      - db
    ports:
      - ${DATABASE_PORT:-5432}:5432
    environment:
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      POSTGRES_DB: ${DATABASE_NAME:-suap_dev}
      PGDATA: /data/postgres
    volumes:
      # Backup
      - ${DATABASE_BACKUP_DIR:-.././backup}:/backup
      # data
      - .././volumes/pg_data:/data/postgres
      #- ./volumes/pg_data:/var/lib/postgresql/data
      - .././backup/init_database.sh:/docker-entrypoint-initdb.d/init_database.sh

  pgadmin:
    env_file:
      - .env
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@pgadmin.org"
      PGADMIN_DEFAULT_PASSWORD: "admin"
    ports:
      - "8001:80"
    volumes:
      - .././volumes/pgadmin:/var/lib/pgadmin
      - ./docker_pgadmin_servers.json:/pgadmin4/servers.json
    entrypoint:
      - "/bin/sh"
      - "-c"
      - "/bin/echo 'docker-db:5432:${DATABASE_NAME:-suap_dev}:${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}' > /tmp/pgpassfile && chmod 600 /tmp/pgpassfile && /entrypoint.sh"
    networks:
      - suap

networks:
  suap:
    driver: bridge

volumes:
    postgres: