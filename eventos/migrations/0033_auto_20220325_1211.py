# Generated by Django 3.2.5 on 2022-03-25 12:11
import re

from django.db import migrations
from tqdm import tqdm


def to_int(ch):
    try:
        return int(ch)
    except ValueError:
        return False


def to_float(ch):
    try:
        return float(ch.replace(',', '.'))
    except ValueError:
        return False


def horas_to_segundos(horas):
    return minutos_to_segundos(horas) * 60


def minutos_to_segundos(minutos):
    return minutos * 60


def atualizar_carga_horaria(apps, schema_editor):
    Evento = apps.get_model('eventos', 'Evento')
    regexs = [
        r'^(?P<ch>\d+)[\s]*h(s)?$',
        r'^(?P<ch>\d+)[\s]*hora(s)?$',
        r'^(?P<ch>\d+[,]\d+)[\s]*(h)?$',
        r'^(?P<ch>\d+[,]\d+)[\s]*(horas)?$',
        r'^(?P<ch>\d+)h(?P<min>\d+)(min)?$',
        r'^(?P<ch>\d+)[:.](?P<min>\d+)[\s]*(h)?(s)?(horas)?$',
        r'^(?P<ch>\d+)[\s]*hora(s)?[\s]*e[\s]*(?P<min>\d+)[\s]*minuto(s)?$',
        r'^(?P<ch>\d+)[\s]*(horas/aula)?(h/aula)?(h/a)?$',
        r'^(?P<min>\d+)[\s]*(minutos)?(min)?$',
    ]
    for evento in tqdm(Evento.objects.all()):
        if evento.carga_horaria_str:
            carga_horaria = to_int(evento.carga_horaria_str)
            if carga_horaria:
                carga_horaria = horas_to_segundos(carga_horaria)
            else:
                for regex in regexs:
                    exp_ch = re.search(regex, evento.carga_horaria_str.strip(), flags=re.I | re.X)
                    if not exp_ch or ('ch' not in exp_ch.groupdict() and 'min' not in exp_ch.groupdict()):
                        continue
                    if 'ch' in exp_ch.groupdict():
                        carga_horaria = to_int(exp_ch.groupdict()['ch'])
                        if carga_horaria:
                            carga_horaria = horas_to_segundos(carga_horaria)
                            if 'min' in exp_ch.groupdict():
                                carga_horaria += minutos_to_segundos(to_int(exp_ch.groupdict()['min']))

                        else:
                            carga_horaria = to_float(exp_ch.groupdict()['ch'])
                            if carga_horaria:
                                carga_horaria = horas_to_segundos(carga_horaria)

                    elif 'min' in exp_ch.groupdict():
                        carga_horaria = minutos_to_segundos(to_int(exp_ch.groupdict()['min']))

            if carga_horaria:
                evento.carga_horaria = carga_horaria
                evento.save()


class Migration(migrations.Migration):

    dependencies = [
        ('eventos', '0032_auto_20220325_1127'),
    ]

    operations = [
        migrations.RunPython(atualizar_carga_horaria),
    ]
