# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2019-08-14 14:57


from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import djtools.db.models
import djtools.middleware.threadlocals


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('estacionamento', '0001_initial'),
        ('comum', '0002_auto_20190814_1443'),
        ('rh', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('patrimonio', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='ManutencaoViatura',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField()),
                ('odometro', models.PositiveIntegerField()),
                (
                    'tipo_servico',
                    models.CharField(
                        choices=[
                            ('Manutenção Periódica', 'Manutenção Periódica'),
                            ('Problema de Funcionamento', 'Problema de Funcionamento'),
                            ('Acidente', 'Acidente'),
                            ('Outro', 'Outro'),
                        ],
                        max_length=30,
                        verbose_name='Tipo de Serviço',
                    ),
                ),
                (
                    'valor_total_pecas',
                    djtools.db.models.DecimalFieldPlus(
                        blank=True, decimal_places=2, default=Decimal('0.0'), max_digits=12, null=True, verbose_name='Valor Total da Nota Fiscal de Peças (R$)'
                    ),
                ),
                (
                    'valor_total_servico',
                    djtools.db.models.DecimalFieldPlus(decimal_places=2, default=Decimal('0.0'), max_digits=12, verbose_name='Valor Total da Nota Fiscal de Serviços (R$)'),
                ),
                ('arquivo_nf_pecas', models.FileField(blank=True, max_length=255, null=True, upload_to='upload/frota/notas_fiscais/')),
                ('arquivo_nf_servicos', models.FileField(blank=True, max_length=255, null=True, upload_to='upload/frota/notas_fiscais/')),
                ('obs', models.CharField(max_length=500, verbose_name='Observação')),
            ],
            options={'verbose_name': 'Serviço', 'verbose_name_plural': 'Serviços'},
        ),
        migrations.CreateModel(
            name='Maquina',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=500, verbose_name='Descrição')),
                ('capacidade_tanque', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Capacidade do Tanque (em litros)')),
                ('consumo_anual_estimado', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Consumo Estimado por Ano (em litros)')),
                ('campus', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='frota_maquina_campus', to='rh.UnidadeOrganizacional')),
                ('combustiveis', models.ManyToManyField(to='estacionamento.VeiculoCombustivel')),
                ('patrimonio', djtools.db.models.ForeignKeyPlus(null=True, on_delete=django.db.models.deletion.CASCADE, to='patrimonio.Inventario', verbose_name='Patrimônio')),
            ],
            options={
                'verbose_name': 'Máquina',
                'verbose_name_plural': 'Máquinas',
                'permissions': (
                    ('tem_acesso_maquina_sistemico', 'Tem acesso sistêmico as máquinas'),
                    ('tem_acesso_maquina_campus', 'Tem acesso por campus as máquinas'),
                    ('tem_acesso_maquina_operador', 'Tem acesso de operador as máquinas'),
                ),
            },
        ),
        migrations.CreateModel(
            name='MaquinaOrdemAbastecimento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField()),
                ('cupom_fiscal', models.CharField(max_length=10, verbose_name='Cupom Fiscal')),
                ('quantidade', djtools.db.models.DecimalFieldPlus(decimal_places=2, max_digits=12, verbose_name='Quantidade (em Litros)')),
                ('valor_total_nf', djtools.db.models.DecimalFieldPlus(decimal_places=2, default=Decimal('0.0'), max_digits=12, verbose_name='Valor Total da Nota Fiscal (R$)')),
                ('arquivo_nf', models.FileField(blank=True, max_length=255, null=True, upload_to='upload/frota/ordens_abastecimento/', verbose_name='Arquivo da Nota Fiscal')),
                ('obs', models.CharField(blank=True, max_length=500, null=True, verbose_name='Observação')),
                ('combustivel', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='estacionamento.VeiculoCombustivel', verbose_name='Combustível')),
                ('maquina', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='frota.Maquina', verbose_name='Máquina')),
            ],
            options={'verbose_name': 'Ordem de Abastecimento de Máquina', 'verbose_name_plural': 'Ordens de Abastecimentos de Máquina'},
        ),
        migrations.CreateModel(
            name='MotoristaTemporario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('portaria', models.CharField(blank=True, max_length=20, null=True)),
                ('ano_portaria', models.IntegerField(blank=True, null=True)),
                ('validade_inicial', models.DateField(verbose_name='Data de Início')),
                ('validade_final', models.DateField(null=True, verbose_name='Data Limite')),
                ('obs', models.TextField(blank=True, null=True, verbose_name='Observações')),
                ('arquivo', models.FileField(blank=True, max_length=255, null=True, upload_to='upload/frota/portarias/')),
                ('vinculo_pessoa', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='comum.Vinculo')),
            ],
            options={'verbose_name': 'Motorista Temporário', 'verbose_name_plural': 'Motoristas Temporários', 'ordering': ['vinculo_pessoa__pessoa__nome']},
        ),
        migrations.CreateModel(
            name='Viagem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saida_odometro', models.PositiveIntegerField()),
                ('saida_data', models.DateTimeField(verbose_name='Data de Saída')),
                ('saida_obs', models.TextField(blank=True, null=True, verbose_name='Observações')),
                ('chegada_odometro', models.PositiveIntegerField(blank=True, null=True)),
                ('chegada_data', models.DateTimeField(blank=True, null=True, verbose_name='Data de Chegada')),
                ('chegada_obs', models.TextField(blank=True, null=True, verbose_name='Observações')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Viagem',
                'verbose_name_plural': 'Viagens',
                'ordering': ['saida_odometro'],
                'permissions': (
                    ('tem_acesso_viagem_sistemico', 'Tem acesso sistêmico as viagens'),
                    ('tem_acesso_viagem_campus', 'Tem acesso por campus as viagens'),
                    ('tem_acesso_viagem_operador', 'Tem acesso de operador as viagens'),
                    ('pode_cadastrar_viagem_retroativa', 'Pode cadastrar viagem retroativa'),
                    ('pode_gerenciar_viagem', 'Pode registrar viagem'),
                ),
            },
        ),
        migrations.CreateModel(
            name='ViagemAgendamento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'status',
                    models.CharField(
                        choices=[['Deferida', 'Deferida'], ['Indeferida', 'Indeferida'], ['Pendente', 'Pendente'], ['Parcialmente Deferida', 'Parcialmente Deferida']],
                        max_length=30,
                        verbose_name='Situação',
                    ),
                ),
                ('objetivo', models.TextField()),
                ('intinerario', models.TextField(verbose_name='Itinerário')),
                ('data_saida', models.DateTimeField(verbose_name='Saída')),
                ('data_chegada', models.DateTimeField(verbose_name='Chegada')),
                ('data_solicitacao', models.DateTimeField(auto_now_add=True, verbose_name='Data da Solicitação')),
                ('local_saida', models.CharField(blank=True, max_length=500, null=True, verbose_name='Local de Saída da Viatura')),
                ('quantidade_diarias', djtools.db.models.DecimalFieldPlus(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Quantidade de Diárias')),
                (
                    'nome_responsavel',
                    djtools.db.models.CharFieldPlus(
                        blank=True, help_text='Informe o nome da pessoa a ser contactada em caso de necessidade.', max_length=255, null=True, verbose_name='Nome do Responsável'
                    ),
                ),
                (
                    'telefone_responsavel',
                    djtools.db.models.BrTelefoneField(
                        blank=True, help_text='Informe o telefone da pessoa a ser contactada em caso de necessidade.', max_length=15, verbose_name='Telefone do Responsável'
                    ),
                ),
                ('avaliado_em', djtools.db.models.DateTimeFieldPlus(null=True)),
                ('aprovado', models.BooleanField(default=False, verbose_name='Aprovado')),
                ('arquivo', models.FileField(blank=True, max_length=255, null=True, upload_to='upload/frota/comprovante_agendamento/', verbose_name='Documento de Comprovação')),
                (
                    'autor',
                    djtools.db.models.CurrentUserField(
                        blank=True,
                        default=djtools.middleware.threadlocals.get_user,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ('avaliado_por', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='frota_avaliador', to='rh.Servidor')),
                ('setor', djtools.db.models.ForeignKeyPlus(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rh.Setor')),
                (
                    'vinculo_solicitante',
                    models.ForeignKey(
                        help_text='Pessoa solicitante da viagem; não necessariamente será passageiro.', null=True, on_delete=django.db.models.deletion.CASCADE, to='comum.Vinculo'
                    ),
                ),
                ('vinculos_interessados', models.ManyToManyField(related_name='vinculos_interessados_agendamento_set', to='comum.Vinculo')),
                (
                    'vinculos_passageiros',
                    models.ManyToManyField(
                        help_text='Caso o solicitante seja passageiro, ele deve ser especificado neste campo',
                        related_name='vinculos_passageiros_agendamento_set',
                        to='comum.Vinculo',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Agendamento de Viagem',
                'verbose_name_plural': 'Agendamentos de Viagens',
                'permissions': (
                    ('pode_editar_mesmo_deferida', 'Pode editar mesmo após deferimento'),
                    ('tem_acesso_agendamento_sistemico', 'Tem acesso sistêmico aos agendamentos'),
                    ('tem_acesso_agendamento_campus', 'Tem acesso por campus aos agendamentos'),
                    ('tem_acesso_agendamento_operador', 'Tem acesso de operador aos agendamentos'),
                    ('tem_acesso_agendamento_agendador', 'Tem acesso de agendador aos agendamentos'),
                ),
            },
        ),
        migrations.CreateModel(
            name='ViagemAgendamentoResposta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateTimeField(verbose_name='Data')),
                ('obs', models.TextField(blank=True, null=True, verbose_name='Observações')),
                ('data_avaliacao', models.DateTimeField(auto_now_add=True)),
                ('agendamento', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='frota.ViagemAgendamento')),
                (
                    'autor',
                    djtools.db.models.CurrentUserField(
                        blank=True,
                        default=djtools.middleware.threadlocals.get_user,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ('motoristas', djtools.db.models.ManyToManyFieldPlus(to='comum.Vinculo')),
            ],
            options={'verbose_name': 'Resposta do Agendamento de Viagem', 'verbose_name_plural': 'Respostas dos Agendamentos de Viagens'},
        ),
        migrations.CreateModel(
            name='Viatura',
            fields=[
                (
                    'veiculo_ptr',
                    models.OneToOneField(
                        auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='estacionamento.Veiculo'
                    ),
                ),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('propria_instituicao', models.BooleanField(default=True, verbose_name='Pertence à Instituição')),
                ('data_proxima_revisao', models.DateField(null=True, verbose_name='Data da Próxima Revisão')),
                ('campus', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='rh.UnidadeOrganizacional', verbose_name='Campus')),
            ],
            options={
                'verbose_name': 'Viatura',
                'verbose_name_plural': 'Viaturas',
                'ordering': ['placa_codigo_atual', 'modelo'],
                'permissions': (
                    ('tem_acesso_viatura_sistemico', 'Tem acesso sistêmico as viaturas'),
                    ('tem_acesso_viatura_campus', 'Tem acesso por campus as viaturas'),
                    ('tem_acesso_viatura_operador', 'Tem acesso de operador as viaturas'),
                ),
            },
            bases=('estacionamento.veiculo',),
        ),
        migrations.CreateModel(
            name='ViaturaGrupo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(max_length=3, unique=True)),
                ('nome', models.CharField(max_length=50, unique=True)),
                ('descricao', models.CharField(max_length=250, unique=True)),
            ],
            options={'verbose_name': 'Grupo da Viatura', 'verbose_name_plural': 'Grupos de Viaturas', 'ordering': ['codigo', 'nome']},
        ),
        migrations.CreateModel(
            name='ViaturaOrdemAbastecimento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateTimeField(verbose_name='Data')),
                ('odometro', models.PositiveIntegerField(default=0, help_text='Quilometragem no momento do abastecimento', verbose_name='Odômetro')),
                ('cupom_fiscal', models.CharField(max_length=10, verbose_name='Cupom Fiscal')),
                ('quantidade', djtools.db.models.DecimalFieldPlus(decimal_places=2, max_digits=12)),
                ('valor_unidade', djtools.db.models.DecimalFieldPlus(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Valor da Unidade')),
                ('arquivo', models.FileField(blank=True, max_length=255, null=True, upload_to='upload/frota/nota_fiscal/')),
                ('valor_total_nf', djtools.db.models.DecimalFieldPlus(decimal_places=2, default=Decimal('0.0'), max_digits=12, verbose_name='Valor Total da Nota Fiscal (R$)')),
                ('combustivel', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='estacionamento.VeiculoCombustivel', verbose_name='Combustível')),
                ('viatura', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='frota.Viatura')),
            ],
            options={'verbose_name': 'Ordem de Abastecimento de Viatura', 'verbose_name_plural': 'Ordens de Abastecimento de Viatura'},
        ),
        migrations.CreateModel(
            name='ViaturaStatus',
            fields=[('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('descricao', models.CharField(max_length=15, unique=True))],
            options={'verbose_name': 'Situação da Viatura', 'verbose_name_plural': 'Situações das Viaturas', 'ordering': ['descricao']},
        ),
        migrations.AddField(model_name='viatura', name='grupo', field=djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='frota.ViaturaGrupo')),
        migrations.AddField(
            model_name='viatura', name='patrimonio', field=djtools.db.models.ForeignKeyPlus(null=True, on_delete=django.db.models.deletion.CASCADE, to='patrimonio.Inventario')
        ),
        migrations.AddField(
            model_name='viatura',
            name='status',
            field=djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='frota.ViaturaStatus', verbose_name='Situação'),
        ),
        migrations.AddField(
            model_name='viagemagendamentoresposta',
            name='viatura',
            field=djtools.db.models.ForeignKeyPlus(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='frota.Viatura'),
        ),
        migrations.AddField(
            model_name='viagemagendamentoresposta',
            name='vinculo_responsavel',
            field=djtools.db.models.ForeignKeyPlus(
                null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vinculo_responsavel_agendamentoresposta', to='comum.Vinculo'
            ),
        ),
        migrations.AddField(
            model_name='viagem',
            name='agendamento_resposta',
            field=djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='frota.ViagemAgendamentoResposta'),
        ),
        migrations.AddField(
            model_name='viagem',
            name='autor',
            field=djtools.db.models.CurrentUserField(
                blank=True, default=djtools.middleware.threadlocals.get_user, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name='viagem', name='motorista', field=djtools.db.models.ForeignKeyPlus(null=True, on_delete=django.db.models.deletion.CASCADE, to='rh.PessoaFisica')
        ),
        migrations.AddField(model_name='viagem', name='motoristas', field=djtools.db.models.ManyToManyFieldPlus(to='comum.Vinculo')),
        migrations.AddField(model_name='viagem', name='viatura', field=djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='frota.Viatura')),
        migrations.AddField(model_name='viagem', name='vinculos_passageiros', field=models.ManyToManyField(related_name='vinculos_passageiros_set', to='comum.Vinculo')),
        migrations.AddField(
            model_name='manutencaoviatura', name='viatura', field=djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='frota.Viatura')
        ),
        migrations.AlterUniqueTogether(name='motoristatemporario', unique_together=set([('vinculo_pessoa', 'portaria')])),
    ]
