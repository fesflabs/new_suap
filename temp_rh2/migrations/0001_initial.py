# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2019-08-14 15:13


import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import djtools.db.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [migrations.swappable_dependency(settings.AUTH_USER_MODEL), ('comum', '0002_auto_20190814_1443'), ('rh', '0001_initial')]

    operations = [
        migrations.CreateModel(
            name='Categoria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=20, verbose_name='Nome')),
                ('idade_inferior', models.PositiveIntegerField(verbose_name='Limite de idade inferior')),
                ('idade_superior', models.PositiveIntegerField(verbose_name='Limite de idade superior')),
                ('excluido', models.BooleanField(default=False)),
            ],
            options={'verbose_name': 'Categoria', 'verbose_name_plural': 'Categorias'},
        ),
        migrations.CreateModel(
            name='CompeticaoDesportiva',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=20, verbose_name='Nome')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('max_modalidades_coletivas_por_inscricao', models.PositiveIntegerField(default=2, verbose_name='Quantidade Máxima de modalidades coletivas')),
                ('max_modalidades_individuais_por_inscricao', models.PositiveIntegerField(default=2, verbose_name='Quantidade Máxima modalidades individuais')),
                ('max_modalidades_por_inscricao', models.PositiveIntegerField(default=4, verbose_name='Quantidade Máxima modalidades Independente se individual ou coletiva')),
                ('max_provas_natacao', models.PositiveIntegerField(default=3, verbose_name='Máximo de provas de Natação')),
                ('max_provas_atletismo', models.PositiveIntegerField(default=3, verbose_name='Máximo de provas de Atletismo')),
                ('max_provas_jogos_eletronicos', models.PositiveIntegerField(default=3, verbose_name='Máximo de provas dos jogos eletrônicos')),
                ('data_inicio_periodo_inscricoes', djtools.db.models.DateFieldPlus(verbose_name='Data inicial do período de inscrições')),
                ('data_fim_periodo_inscricoes', djtools.db.models.DateFieldPlus(verbose_name='Data final do período de inscrições')),
                ('data_inicio_periodo_validacao', djtools.db.models.DateFieldPlus(verbose_name='Data inicial do período de validação')),
                ('data_fim_periodo_validacao', djtools.db.models.DateFieldPlus(verbose_name='Data final do período de validação')),
                ('data_inicio_confirmacao_inscritos', djtools.db.models.DateFieldPlus(verbose_name='Data inicial do período de confirmação dos inscritos')),
                ('data_fim_confirmacao_inscritos', djtools.db.models.DateFieldPlus(verbose_name='Data final do período de confirmação dos inscritos')),
                ('data_inicio_reajustes', djtools.db.models.DateFieldPlus(verbose_name='Data inicial do período de reajustes (pelo representante do campus)')),
                ('data_fim_reajustes', djtools.db.models.DateFieldPlus(verbose_name='Data final do período de reajustes (pelo representante do campus)')),
                ('data_homologacao_inscricoes', djtools.db.models.DateFieldPlus(verbose_name='Data de homologação e consolidação das inscrições')),
                ('data_inicio_periodo1_jogos', djtools.db.models.DateFieldPlus(verbose_name='Data inicial do período 1 de jogos')),
                ('data_fim_periodo1_jogos', djtools.db.models.DateFieldPlus(verbose_name='Data final do período 1 de jogos')),
                ('data_inicio_periodo2_jogos', djtools.db.models.DateFieldPlus(blank=True, null=True, verbose_name='Data inicial do período 2 de jogos')),
                ('data_fim_periodo2_jogos', djtools.db.models.DateFieldPlus(blank=True, null=True, verbose_name='Data final do período 2 de jogos')),
                ('ano', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='comum.Ano')),
                ('categorias', models.ManyToManyField(to='temp_rh2.Categoria', verbose_name='Categorias')),
            ],
            options={'verbose_name': 'Competição Desportiva', 'verbose_name_plural': 'Competições Desportivas', 'ordering': ('ano', 'nome')},
        ),
        migrations.CreateModel(
            name='ConteudoEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assunto', models.CharField(max_length=255, verbose_name='Assunto')),
                ('corpo', ckeditor.fields.RichTextField(verbose_name='Corpo')),
            ],
            options={'abstract': False},
        ),
        migrations.CreateModel(
            name='CursoSuap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sigla', models.CharField(max_length=10, verbose_name='Sigla')),
                ('denominacao', models.CharField(max_length=255, verbose_name='Denominação')),
                ('sobre', models.TextField(verbose_name='Sobre')),
                ('data_inicio_periodo_inscricoes', djtools.db.models.DateFieldPlus(verbose_name='Data inicial do período de inscrições')),
                ('data_fim_periodo_inscricoes', djtools.db.models.DateFieldPlus(verbose_name='Data final do período de inscrições')),
                ('ativo', models.BooleanField(default=False)),
            ],
            options={'verbose_name': 'Curso', 'verbose_name_plural': 'Cursos'},
        ),
        migrations.CreateModel(
            name='InscricaoCompeticaoDesportiva',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'termo_recebimento_hospedagem',
                    models.BooleanField(
                        default=False,
                        help_text='Estou ciente de que a desistência de participação poderá acarretar à devolução dos valores referentes a hospedagem, salvo por motivo devidamente justificado ao respectivo representante do campus/polo até a data limite de homologação das inscrições.',
                        verbose_name='Desejo receber hospedagem',
                    ),
                ),
                (
                    'preferencia_camisa',
                    models.PositiveIntegerField(
                        choices=[(1, 'PP'), (2, 'P'), (3, 'M'), (4, 'G'), (5, 'GG'), (6, 'XG')], default=3, help_text='Tamanho da camisa/uniforme', verbose_name='Tamanho da camisa'
                    ),
                ),
                (
                    'preferencia_short',
                    models.PositiveIntegerField(
                        choices=[(1, 'PP'), (2, 'P'), (3, 'M'), (4, 'G'), (5, 'GG'), (6, 'XG')], default=3, help_text='Tamanho da short/uniforme', verbose_name='Tamanho do short'
                    ),
                ),
                (
                    'situacao',
                    models.PositiveIntegerField(
                        choices=[(1, 'Inscrição em Análise'), (2, 'Validada'), (3, 'Homologada'), (4, 'Rejeitada')], default=1, help_text='Situação', verbose_name='Situação'
                    ),
                ),
                (
                    'termo_aceitacao_exame',
                    models.BooleanField(
                        blank=False,
                        default=False,
                        help_text='Estou ciente de que a participação nos jogos está condicionada a entrega de Atestado Médico comprovando a capacidade física competitiva para salvaguardar minha integridade física. A entrega do atestado é obrigatória para todas as modalidades, exceto para o xadrez.',
                        verbose_name='Termo de aceitação para entrega do atestado médico',
                    ),
                ),
                ('validado_em', djtools.db.models.DateTimeFieldPlus(blank=True, null=True)),
                ('homologado_em', djtools.db.models.DateTimeFieldPlus(blank=True, null=True)),
                ('rejeitado_em', djtools.db.models.DateTimeFieldPlus(blank=True, null=True)),
                ('observacao_rejeicao', models.TextField(blank=True, verbose_name='Observação da Rejeição')),
                (
                    'atestado_medico',
                    djtools.db.models.FileFieldPlus(
                        blank=True,
                        help_text='Neste campo você deve anexar o atestado médico para a participação nos jogos. O atestado é obrigatório para todos os participantes, exceto os inscritos somente em tênis de mesa e/ou xadrez. Tipos de arquivos aceitos: PDF, PNG ou JPG. Tamanho Máximo: 5Mb',
                        null=True,
                        upload_to='temp_rh2/atividade_complementar/',
                        verbose_name='Atestado Médico',
                    ),
                ),
                ('categoria', djtools.db.models.ForeignKeyPlus(null=True, on_delete=django.db.models.deletion.CASCADE, to='temp_rh2.Categoria', verbose_name='Categoria')),
                (
                    'competicao_desportiva',
                    djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='temp_rh2.CompeticaoDesportiva', verbose_name='Competição'),
                ),
                (
                    'homologado_por',
                    djtools.db.models.ForeignKeyPlus(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='inscricao_desportiva_homologada_por',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'verbose_name': 'Inscrição na Competição Desportiva',
                'verbose_name_plural': 'Inscrições na Competições Desportivas',
                'permissions': (('pode_validar_inscricaocompeticaodesportiva', 'Pode validar inscrição competição desportiva'),),
            },
        ),
        migrations.CreateModel(
            name='InscricaoCursoSuap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', djtools.db.models.DateTimeFieldPlus(blank=True, null=True, verbose_name='Data')),
                ('enviou_email_solinsc', models.BooleanField(default=False, verbose_name='Coordenação Enviou email para o inscrito')),
                ('data_confirmacao_inscricao', models.DateField(blank=True, null=True, verbose_name='Data de Confirmação da Inscrição')),
                ('solicitou_diaria', models.BooleanField(default=False, verbose_name='Solicitou diária')),
                ('curso', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.PROTECT, to='temp_rh2.CursoSuap')),
                ('usuario', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={'abstract': False},
        ),
        migrations.CreateModel(
            name='LogInscricaoCursoSuap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log', models.CharField(max_length=255, verbose_name='Log')),
                ('data', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Data/Hora')),
            ],
            options={'abstract': False},
        ),
        migrations.CreateModel(
            name='ModalidadeDesportiva',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=20, verbose_name='Nome')),
                (
                    'sexo',
                    models.PositiveIntegerField(
                        choices=[(1, 'Masculino'), (2, 'Feminino'), (3, 'Misto'), (4, 'Não se aplica')],
                        default=1,
                        help_text='Quando o esporte for individual escolher "Não se aplica"',
                        verbose_name='Sexo',
                    ),
                ),
                ('tipo', models.PositiveIntegerField(choices=[(1, 'Coletivo'), (2, 'Individual')], default=1, verbose_name='Tipo')),
                ('exige_atestado', models.BooleanField(default=True, verbose_name='Modalidade exige atestado médico?')),
            ],
            options={'verbose_name': 'Modalidade Desportiva', 'verbose_name_plural': 'Modalidades Desportivas', 'permissions': ()},
        ),
        migrations.CreateModel(
            name='Prova',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=20, verbose_name='Nome')),
                ('modalidade', djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='temp_rh2.ModalidadeDesportiva', verbose_name='Modalidade')),
            ],
            options={'verbose_name': 'Prova', 'verbose_name_plural': 'Provas'},
        ),
        migrations.AddField(
            model_name='inscricaocompeticaodesportiva', name='modalidades', field=models.ManyToManyField(to='temp_rh2.ModalidadeDesportiva', verbose_name='Modalidades')
        ),
        migrations.AddField(
            model_name='inscricaocompeticaodesportiva',
            name='provas_atletismo',
            field=models.ManyToManyField(blank=True, related_name='provas_atletismo', to='temp_rh2.Prova', verbose_name='Provas da Atletismo'),
        ),
        migrations.AddField(
            model_name='inscricaocompeticaodesportiva',
            name='provas_jogos_eletronicos',
            field=models.ManyToManyField(blank=True, related_name='provas_jogos_eletronicos', to='temp_rh2.Prova', verbose_name='Provas Jogos Eletrônicos'),
        ),
        migrations.AddField(
            model_name='inscricaocompeticaodesportiva',
            name='provas_natacao',
            field=models.ManyToManyField(blank=True, related_name='provas_natacao', to='temp_rh2.Prova', verbose_name='Provas da Natação'),
        ),
        migrations.AddField(
            model_name='inscricaocompeticaodesportiva',
            name='rejeitado_por',
            field=djtools.db.models.ForeignKeyPlus(
                blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inscricao_desportiva_rejeitada_por', to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name='inscricaocompeticaodesportiva', name='servidor', field=djtools.db.models.ForeignKeyPlus(on_delete=django.db.models.deletion.CASCADE, to='rh.Servidor')
        ),
        migrations.AddField(
            model_name='inscricaocompeticaodesportiva',
            name='uo',
            field=djtools.db.models.ForeignKeyPlus(blank=True, on_delete=django.db.models.deletion.CASCADE, to='rh.UnidadeOrganizacional', verbose_name='Campus Inscrito'),
        ),
        migrations.AddField(
            model_name='inscricaocompeticaodesportiva',
            name='validado_por',
            field=djtools.db.models.ForeignKeyPlus(
                blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inscricao_desportiva_validada_por', to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name='competicaodesportiva', name='modalidades', field=models.ManyToManyField(to='temp_rh2.ModalidadeDesportiva', verbose_name='Modalidades desportivas')
        ),
        migrations.AddField(
            model_name='competicaodesportiva',
            name='provas_atletismo',
            field=models.ManyToManyField(blank=True, related_name='provas_atletismo_competicao', to='temp_rh2.Prova', verbose_name='Provas da Atletismo'),
        ),
        migrations.AddField(
            model_name='competicaodesportiva',
            name='provas_jogos_eletronicos',
            field=models.ManyToManyField(blank=True, related_name='provas_jogos_eletronicos_competicao', to='temp_rh2.Prova', verbose_name='Provas dos Jogos Eletrônicos'),
        ),
        migrations.AddField(
            model_name='competicaodesportiva',
            name='provas_natacao',
            field=models.ManyToManyField(blank=True, related_name='provas_natacao_competicao', to='temp_rh2.Prova', verbose_name='Provas da Natação'),
        ),
        migrations.AddField(
            model_name='competicaodesportiva',
            name='uo',
            field=djtools.db.models.ForeignKeyPlus(
                blank=True,
                help_text='Define escopo da competição',
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='rh.UnidadeOrganizacional',
                verbose_name='Unidade Organizacional',
            ),
        ),
        migrations.AlterUniqueTogether(name='inscricaocompeticaodesportiva', unique_together=set([('servidor', 'competicao_desportiva')])),
        migrations.AlterUniqueTogether(name='competicaodesportiva', unique_together=set([('nome', 'ano')])),
    ]
